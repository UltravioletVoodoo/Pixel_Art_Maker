{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonbe\\\\Desktop\\\\Personal\\\\Pixel_Art_Maker\\\\components\\\\pixelGrid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { getDimensions } from \"../hooks/getDimensions\";\nimport \"../styles/pixelGrid.css\";\nimport getMousePos from \"../hooks/getMousePosition\";\nexport default function PixelGrid() {\n  const dimensions = getDimensions();\n  let canvasDim = Math.min(dimensions.width, dimensions.height) * 0.8; // Canvas is a square with the smallest dimension as a base\n\n  const mousePos = getMousePos();\n  let gridPoints = convertPositionToGrid(mousePos, canvasDim, 4);\n  return __jsx(\"div\", {\n    className: \"centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Window's dimensions are \", dimensions.width, \" by \", dimensions.height), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Mouse was last seen on canvas at point: (\", mousePos.x, \" , \", mousePos.y, \")\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Last active gridpoint based on position: (\", gridPoints.x, \" , \", gridPoints.y, \")\"), __jsx(\"canvas\", {\n    className: \"pixelGrid\",\n    id: \"pixelGrid\",\n    width: canvasDim.x,\n    height: canvasDim.y,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n}\n\nfunction convertPositionToGrid(pos, dimensions, numCells) {\n  let cellsPerRow = Math.sqrt(numCells);\n  let cellSize = dimensions / cellsPerRow;\n  return {\n    x: convert(pos.x, cellSize, cellsPerRow),\n    y: convert(pos.y, cellSize, cellsPerRow)\n  };\n}\n\nfunction convert(val, cellSize, cellsPerRow) {\n  let result = Math.ceil(val / cellSize) - 1;\n  if (result > cellsPerRow - 1) result = cellsPerRow - 1;\n  if (result < 0) result = 0;\n  return result;\n}","map":{"version":3,"sources":["C:/Users/jonbe/Desktop/Personal/Pixel_Art_Maker/components/pixelGrid.js"],"names":["getDimensions","getMousePos","PixelGrid","dimensions","canvasDim","Math","min","width","height","mousePos","gridPoints","convertPositionToGrid","x","y","pos","numCells","cellsPerRow","sqrt","cellSize","convert","val","result","ceil"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,OAAO,yBAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAChC,QAAMC,UAAU,GAAGH,aAAa,EAAhC;AACA,MAAII,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,UAAU,CAACI,KAApB,EAA2BJ,UAAU,CAACK,MAAtC,IAAgD,GAAhE,CAFgC,CAEqC;;AAErE,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,MAAIS,UAAU,GAAGC,qBAAqB,CAACF,QAAD,EAAWL,SAAX,EAAsB,CAAtB,CAAtC;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA4BD,UAAU,CAACI,KAAvC,UAAkDJ,UAAU,CAACK,MAA7D,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAA6CC,QAAQ,CAACG,CAAtD,SAA4DH,QAAQ,CAACI,CAArE,MAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAA8CH,UAAU,CAACE,CAAzD,SAA+DF,UAAU,CAACG,CAA1E,MAHJ,EAII;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAA8B,IAAA,EAAE,EAAC,WAAjC;AAA6C,IAAA,KAAK,EAAET,SAAS,CAACQ,CAA9D;AAAiE,IAAA,MAAM,EAAER,SAAS,CAACS,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH;;AAED,SAASF,qBAAT,CAA+BG,GAA/B,EAAoCX,UAApC,EAAgDY,QAAhD,EAA0D;AACtD,MAAIC,WAAW,GAAGX,IAAI,CAACY,IAAL,CAAUF,QAAV,CAAlB;AACA,MAAIG,QAAQ,GAAGf,UAAU,GAAGa,WAA5B;AAEA,SAAO;AACHJ,IAAAA,CAAC,EAAEO,OAAO,CAACL,GAAG,CAACF,CAAL,EAAQM,QAAR,EAAkBF,WAAlB,CADP;AAEHH,IAAAA,CAAC,EAAEM,OAAO,CAACL,GAAG,CAACD,CAAL,EAAQK,QAAR,EAAkBF,WAAlB;AAFP,GAAP;AAIH;;AAED,SAASG,OAAT,CAAiBC,GAAjB,EAAsBF,QAAtB,EAAgCF,WAAhC,EAA6C;AACzC,MAAIK,MAAM,GAAGhB,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAGF,QAAhB,IAA4B,CAAzC;AACA,MAAIG,MAAM,GAAGL,WAAW,GAAG,CAA3B,EAA8BK,MAAM,GAAGL,WAAW,GAAG,CAAvB;AAC9B,MAAIK,MAAM,GAAG,CAAb,EAAgBA,MAAM,GAAG,CAAT;AAChB,SAAOA,MAAP;AACH","sourcesContent":["import { getDimensions } from \"../hooks/getDimensions\";\r\nimport \"../styles/pixelGrid.css\";\r\nimport getMousePos from \"../hooks/getMousePosition\";\r\n\r\nexport default function PixelGrid() {\r\n    const dimensions = getDimensions();\r\n    let canvasDim = Math.min(dimensions.width, dimensions.height) * 0.8; // Canvas is a square with the smallest dimension as a base\r\n\r\n    const mousePos = getMousePos();\r\n    let gridPoints = convertPositionToGrid(mousePos, canvasDim, 4);\r\n\r\n    return (\r\n        <div className=\"centered\">\r\n            <p>Window's dimensions are {dimensions.width} by {dimensions.height}</p>\r\n            <p>Mouse was last seen on canvas at point: ({mousePos.x} , {mousePos.y})</p>\r\n            <p>Last active gridpoint based on position: ({gridPoints.x} , {gridPoints.y})</p>\r\n            <canvas className=\"pixelGrid\" id=\"pixelGrid\" width={canvasDim.x} height={canvasDim.y}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction convertPositionToGrid(pos, dimensions, numCells) {\r\n    let cellsPerRow = Math.sqrt(numCells);\r\n    let cellSize = dimensions / cellsPerRow;\r\n\r\n    return {\r\n        x: convert(pos.x, cellSize, cellsPerRow),\r\n        y: convert(pos.y, cellSize, cellsPerRow)\r\n    };\r\n}\r\n\r\nfunction convert(val, cellSize, cellsPerRow) {\r\n    let result = Math.ceil(val / cellSize) - 1;\r\n    if (result > cellsPerRow - 1) result = cellsPerRow - 1;\r\n    if (result < 0) result = 0;\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}