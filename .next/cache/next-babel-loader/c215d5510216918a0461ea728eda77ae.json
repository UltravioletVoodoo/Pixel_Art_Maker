{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonbe\\\\Desktop\\\\Personal\\\\Pixel_Art_Maker\\\\components\\\\pixelGrid.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { getDimensions } from \"../hooks/getDimensions\";\nimport \"../styles/pixelGrid.css\";\nimport getMousePos from \"../hooks/getMousePosition\";\nexport default function PixelGrid() {\n  const dimensions = getDimensions();\n  let canvasDim = {\n    x: dimensions.width / 2,\n    y: dimensions.height / 2\n  };\n  const mousePos = getMousePos();\n  let gridPoints = convertPositionToGrid(mousePos, canvasDim, 4);\n  return __jsx(\"div\", {\n    className: \"centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Window's dimensions are \", dimensions.width, \" by \", dimensions.height), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Mouse was last seen on canvas at point: (\", mousePos.x, \" , \", mousePos.y, \")\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Last active gridpoint based on position: (\", gridPoints.x, \" , \", gridPoints.y, \")\"), __jsx(\"canvas\", {\n    className: \"pixelGrid\",\n    id: \"pixelGrid\",\n    width: canvasDim.x,\n    height: canvasDim.y,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n}\n\nfunction convertPositionToGrid(pos, dimensions, numCells) {\n  let cellSize = dimensions.x / size * 2;\n  return {\n    x: convert(pos.x, cellSize),\n    y: convert(pos.y, cellSize)\n  };\n}\n\nfunction convert(val, scale) {\n  let result = Math.ceil(val / scale) - 1;\n  if (result > 1) result = 1;\n  if (result < 0) result = 0;\n  return result;\n}","map":{"version":3,"sources":["C:/Users/jonbe/Desktop/Personal/Pixel_Art_Maker/components/pixelGrid.js"],"names":["getDimensions","getMousePos","PixelGrid","dimensions","canvasDim","x","width","y","height","mousePos","gridPoints","convertPositionToGrid","pos","numCells","cellSize","size","convert","val","scale","result","Math","ceil"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,OAAO,yBAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAChC,QAAMC,UAAU,GAAGH,aAAa,EAAhC;AACA,MAAII,SAAS,GAAG;AAACC,IAAAA,CAAC,EAAEF,UAAU,CAACG,KAAX,GAAmB,CAAvB;AAA0BC,IAAAA,CAAC,EAAEJ,UAAU,CAACK,MAAX,GAAoB;AAAjD,GAAhB;AAEA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,MAAIS,UAAU,GAAGC,qBAAqB,CAACF,QAAD,EAAWL,SAAX,EAAsB,CAAtB,CAAtC;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA4BD,UAAU,CAACG,KAAvC,UAAkDH,UAAU,CAACK,MAA7D,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAA6CC,QAAQ,CAACJ,CAAtD,SAA4DI,QAAQ,CAACF,CAArE,MAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAA8CG,UAAU,CAACL,CAAzD,SAA+DK,UAAU,CAACH,CAA1E,MAHJ,EAII;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAA8B,IAAA,EAAE,EAAC,WAAjC;AAA6C,IAAA,KAAK,EAAEH,SAAS,CAACC,CAA9D;AAAiE,IAAA,MAAM,EAAED,SAAS,CAACG,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH;;AAED,SAASI,qBAAT,CAA+BC,GAA/B,EAAoCT,UAApC,EAAgDU,QAAhD,EAA0D;AACtD,MAAIC,QAAQ,GAAGX,UAAU,CAACE,CAAX,GAAeU,IAAf,GAAsB,CAArC;AAEA,SAAO;AACHV,IAAAA,CAAC,EAAEW,OAAO,CAACJ,GAAG,CAACP,CAAL,EAAQS,QAAR,CADP;AAEHP,IAAAA,CAAC,EAAES,OAAO,CAACJ,GAAG,CAACL,CAAL,EAAQO,QAAR;AAFP,GAAP;AAIH;;AAED,SAASE,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAA6B;AACzB,MAAIC,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAGC,KAAhB,IAAyB,CAAtC;AACA,MAAIC,MAAM,GAAG,CAAb,EAAgBA,MAAM,GAAG,CAAT;AAChB,MAAIA,MAAM,GAAG,CAAb,EAAgBA,MAAM,GAAG,CAAT;AAChB,SAAOA,MAAP;AACH","sourcesContent":["import { getDimensions } from \"../hooks/getDimensions\";\r\nimport \"../styles/pixelGrid.css\";\r\nimport getMousePos from \"../hooks/getMousePosition\";\r\n\r\nexport default function PixelGrid() {\r\n    const dimensions = getDimensions();\r\n    let canvasDim = {x: dimensions.width / 2, y: dimensions.height / 2};\r\n\r\n    const mousePos = getMousePos();\r\n    let gridPoints = convertPositionToGrid(mousePos, canvasDim, 4);\r\n\r\n    return (\r\n        <div className=\"centered\">\r\n            <p>Window's dimensions are {dimensions.width} by {dimensions.height}</p>\r\n            <p>Mouse was last seen on canvas at point: ({mousePos.x} , {mousePos.y})</p>\r\n            <p>Last active gridpoint based on position: ({gridPoints.x} , {gridPoints.y})</p>\r\n            <canvas className=\"pixelGrid\" id=\"pixelGrid\" width={canvasDim.x} height={canvasDim.y}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction convertPositionToGrid(pos, dimensions, numCells) {\r\n    let cellSize = dimensions.x / size * 2;\r\n\r\n    return {\r\n        x: convert(pos.x, cellSize),\r\n        y: convert(pos.y, cellSize)\r\n    };\r\n}\r\n\r\nfunction convert(val, scale) {\r\n    let result = Math.ceil(val / scale) - 1;\r\n    if (result > 1) result = 1;\r\n    if (result < 0) result = 0;\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}