{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.923ab1e28d3fbadd5d07.hot-update.js","sources":["webpack:///./components/pixelGrid.js"],"sourcesContent":["import { getDimensions } from \"../hooks/getDimensions\";\r\nimport getMousePos from \"../hooks/getMousePosition\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport \"../styles/pixelGrid.css\";\r\n\r\nexport default function PixelGrid() {\r\n    const numCells = 4;\r\n\r\n    const dimensions = getDimensions();\r\n    let canvasDim = Math.min(dimensions.width, dimensions.height) * 0.6; // Canvas is a square with the smallest dimension as a base\r\n\r\n    const mousePos = getMousePos();\r\n    let gridPoints = convertPositionToGrid(mousePos, canvasDim, numCells);\r\n\r\n    useEffect(() => drawRectOnGrid(gridPoints, canvasDim, numCells), []);\r\n\r\n    return (\r\n        <div className=\"centered\">\r\n            <p>Window's dimensions are {dimensions.width} by {dimensions.height}</p>\r\n            <p>Mouse was last seen on canvas at point: ({mousePos.x} , {mousePos.y})</p>\r\n            <p>Last active gridpoint based on position: ({gridPoints.x} , {gridPoints.y})</p>\r\n            <canvas className=\"pixelGrid\" id=\"pixelGrid\" width={canvasDim} height={canvasDim}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction convertPositionToGrid(pos, canvasDim, numCells) {\r\n    let cellsPerRow = Math.sqrt(numCells);\r\n    let cellSize = canvasDim / cellsPerRow;\r\n\r\n    return {\r\n        x: convertPositionToGridValues(pos.x, cellSize, cellsPerRow),\r\n        y: convertPositionToGridValues(pos.y, cellSize, cellsPerRow)\r\n    };\r\n}\r\n\r\nfunction convertPositionToGridValues(val, cellSize, cellsPerRow) {\r\n    let result = Math.ceil(val / cellSize) - 1;\r\n    if (result > cellsPerRow - 1) result = cellsPerRow - 1;\r\n    if (result < 0) result = 0;\r\n    return result;\r\n}\r\n\r\nfunction drawRectOnGrid(gridPoints, canvasDim, numCells) {\r\n    // let canvas = document.getElementById(\"pixelGrid\");\r\n    // let ctx = canvas.getContext(\"2d\");\r\n    // let p = convertGridToPx(gridPoints, canvasDim, numCells)\r\n    // ctx.fillRect(0,0,50,50);\r\n    console.log(\"I think i drew a square :P\");\r\n}\r\n\r\nfunction convertGridToPx(gridPoints, canvasDim, numCells) {\r\n    let scale = canvasDim / Math.sqrt(numCells);\r\n    return {\r\n        x: gridPoints.x * scale,\r\n        y: gridPoints.y * scale,\r\n        w: (gridPoints.x + 1) * scale,\r\n        h: (gridPoints.y + 1) * scale\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;A","sourceRoot":""}